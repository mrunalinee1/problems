You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.

Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.

Return true if a and b are alike. Otherwise, return false.
Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.

class Solution {
public:
    bool halvesAreAlike(string s) {
         unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
        int Count = 0;
        int midIndex = s.length() / 2;

        for (int i = 0; i < midIndex; i++) {
            char A = s[i];
            char B = s[midIndex + i];
            if (vowels.count(A))
            Count++;
            if(vowels.count(B))
             Count--;
        }

        return Count == 0;
        
    }
};
