Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1
for O(n^2)complexity
class Solution {
public:
    int firstUniqChar(string s) {
    
        for(int i=0;i<s.size();i++)
        {
            char a=s.at(i);
            if(s.find(a)==i && s.find(a,i+1)==std::string::npos)
            {
                return i;
            
            }
        }
       return -1; 
    }
};

with O(n) complexity
unordered_map<char, int> charCount;

        // Count the frequency of each character
        for (char c : s) {
            charCount[c]++;
        }

        // Find the first character with a frequency of 1
        for (int i = 0; i < s.size(); i++) {
            if (charCount[s[i]] == 1) {
                return i;  // Return the index of the first non-repeating character
            }
        }

        return -1;
