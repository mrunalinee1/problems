class Solution {
public:
    int findRotateSteps(string ring, string key) {
        int n = ring.size();
        int m = key.size();
        
        // Create a 2D array to store minimum steps
        vector<vector<int>> dp(m + 1, vector<int>(n, INT_MAX));
        dp[0][0] = 0; // Initial position
        
        for (int i = 0; i < m; ++i) {
            char c = key[i];
            for (int j = 0; j < n; ++j) {
                if (ring[j] == c) {
                    for (int k = 0; k < n; ++k) {
                        if (dp[i][k] != INT_MAX) {
                            int diff = abs(j - k);
                            int steps = min(diff, n - diff);
                            dp[i + 1][j] = min(dp[i + 1][j], dp[i][k] + steps);
                        }
                    }
                }
            }
        }
        
        // Find the minimum steps required to spell out the entire key
        int minSteps = INT_MAX;
        for (int j = 0; j < n; ++j) {
            minSteps = min(minSteps, dp[m][j]);
        }
        
        return minSteps + m; // Add the length of the key
    }
};
