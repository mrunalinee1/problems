#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int minSwaps(vector<int>& nums) {
        int n = nums.size();
        int total_ones = 0;
        
        // Count the total number of 1s in the array
        for (int num : nums) {
            total_ones += num;
        }
        
        if (total_ones == 0) return 0; // Edge case: no 1s
        
        // Create a doubled array
        vector<int> doubled_nums = nums;
        doubled_nums.insert(doubled_nums.end(), nums.begin(), nums.end());
        
        // Find the maximum number of 1s in any window of size total_ones
        int max_ones_in_window = 0;
        int current_ones_in_window = 0;
        
        for (int i = 0; i < 2 * n; ++i) {
            if (i >= total_ones) {
                if (doubled_nums[i - total_ones] == 1) {
                    current_ones_in_window--;
                }
            }
            if (doubled_nums[i] == 1) {
                current_ones_in_window++;
            }
            if (i >= total_ones - 1) {
                max_ones_in_window = max(max_ones_in_window, current_ones_in_window);
            }
        }
        
        // Minimum swaps required
        return total_ones - max_ones_in_window;
    }
};
