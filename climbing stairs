You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 
//using fibonacci series
Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
class Solution {
public:
    int climbStairs(int n) {
        
        
        int a =0;
        int b=1;
        int c=0;
        for(int i=0;i<n;i++){
            c = a+b;
            a=b;
            b=c;
        }
        return b;
    }
};

//another approach

class Solution {
public:
    int climbStairs(int n) {
         int s = 1;

        for (int i = 1; i <= n / 2; i++) {
            double sum = 1;

            for (int j = i; j < 2 * i; j++) {
                sum *= (double)(n - j) / (j - i + 1);
            }

            s +=sum;
        }

        return s;
    }
};
